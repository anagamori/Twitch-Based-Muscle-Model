%--------------------------------------------------------------------------
% activation2force_new_fit.m
% Author: Akira Nagamori
% Last update: 7/10/18
% Code descriptions
% Ojbective:
%--------------------------------------------------------------------------

close all
clear all
clc
%--------------------------------------------------------------------------
% motor unit parameters
N_MU = 120; % number of motor units
i_MU = 1:N_MU; % index for motor units

%--------------------------------------------------------------------------
L0 = 3;
density = 1.06; % muscle density [g/cm^3]
mass = 0.0055; % muscle mass [kg]
PCSA = (mass*1000)/(density*L0); % PCSA of muscle
sigma = 22.4; % specific tension
F0 = PCSA*sigma;

%--------------------------------------------------------------------------
% Peak tetanus parameter
RP_MU = 25; %range of peak tension across motor untis in unit of fold
b_MU = log(RP_MU)/N_MU; %coefficient to establish a range of twich force values
P_MU = exp(b_MU*i_MU); %force generated by a motor unit as a function of its recruitment threshold

PTi = P_MU./sum(P_MU)*F0;
a_twitch = 0.014061531587007;
b_twitch = 0.030319762726547;
Pi_MU = a_twitch*exp(b_twitch*i_MU);

F_pcsa_slow = 0.5; % fractional PSCA of slow-twitch motor units (0-1)
[~, index_slow] = min(abs(cumsum(PTi) - F0*F_pcsa_slow)); % index for the largest motor unit clacified as slow-twitch
%--------------------------------------------------------------------------
Ur = 0.6; % recruitment threshold for the lastly recruited motor unit
Ur_1 = 0.01; % reruitment threshold for the first unit
f_RT = fit([1 N_MU]',[Ur_1 Ur]','exp1');
coeffs_f_RT = coeffvalues(f_RT);
U_th = coeffs_f_RT(1)*exp(coeffs_f_RT(2)*i_MU); % the resulting recruitment threshold for individual units

MFR1_MU = 8; %minimum firing rate of first unit
MFRn_MU = 14; %minimum firing rate of last unit
RTEn_MU = U_th(end)-Ur_1;  %recruitment threshold of last unit
MFR_MU = MFR1_MU + (MFRn_MU-MFR1_MU) * ((U_th-Ur_1)./RTEn_MU);
PFR_MU = 4*MFR_MU; %peak firing rate
FR_half = PFR_MU./2; % firing rate at which half of maximum tension is achieved

CT_n = 30;
CT_1 = 90;
slope_CT = (CT_1 - CT_n)/(FR_half(1)-FR_half(end));
intercept_CT = slope_CT*FR_half(1)+CT_1;
FR_half_n = FR_half(end);
CT = 3*(CT_n*FR_half_n)./FR_half;
CT = CT - (CT(end)-CT_n);
CT = CT/1000;
RT = CT;

%--------------------------------------------------------------------------
Fs = 1000;
time = 0:1/Fs:5;
t_temp = 0:1/Fs:3;
%--------------------------------------------------------------------------
[b,a] = butter(4,20/(Fs/2),'low');
%--------------------------------------------------------------------------
% simulation parameters
Lce = 0.8;
Y = 1;
S = 0.96;

%--------------------------------------------------------------------------
% Find an index of representative slow twitch fiber
% From Burke et al. (1974), fibers types between slow and fast can be differentiable based on the length of contraction time
% A unit that has contraction time closest to mean contraction time of all
% slow twitch fibers is defined as a representative unit of slow twitch.
mean_CT_slow = mean(CT(1:index_slow));
[~, index_slow_rep] = min(abs(CT(1:index_slow) - mean_CT_slow));

testingUnit =  1; %index_slow_rep;
FR = 32; %round(3*FR_half(testingUnit)); %round(3*FR_half(testingUnit)) %round(2.7*FR_half(testingUnit)); % [2 5 10 15 20 25 30 35 40 45 48];
f_env = FR/FR_half(testingUnit);

alpha = 0.7; %0.57; %1.21*exp(-0.6247*f_env)+0.01628*exp(0.594*f_env);

% if f_env <= 0.5
%     alpha = 1;
% else
%     alpha = 1.21*exp(-0.6247*f_env)+0.01628*exp(0.594*f_env);
% end

% Use average twitch-tetanus ratio (0.3) for slow twitch fibers from Burke
% et al. (1974)
twitch2tetanus_ratio = 0.2;
PT = 1/twitch2tetanus_ratio;
% FR = [52]
% alpha = [0.24]
%% Obtain non-corrected activation-force relationship
% twitch amplitude = 1

%force = zeros(1,length(time));

spikeTrain_temp = spikeTrainGenerator(t_temp,Fs,FR);
spikeTrain = [zeros(1,1*Fs) spikeTrain_temp zeros(1,1*Fs)];

f_env_2 = [zeros(1,1*Fs) f_env*ones(1,length(spikeTrain_temp)) zeros(1,1*Fs)];
f_int = 0;
f_eff = 0;
f_eff_dot = 0;
f_eff_vec = zeros(1,length(f_env_2));
Af_vec = zeros(1,length(f_env_2));

if testingUnit <= index_slow
    Af_old = Af_slow_function(f_env,Lce,Y);
else
    Af_old = Af_fast_function(f_env,Lce,S);
end

for t = 1:length(f_env_2)
    if f_eff_dot >= 0
        if testingUnit <= index_slow
            T_f = 0.0343 + 0.0227*f_env;
        else
            T_f = 0.0206 + 0.0136*f_env;
        end
    else
        if testingUnit <= index_slow
            T_f = (0.047+0.0252*Af_old);
        else
            T_f = (0.0282+0.0151*Af_old);
        end
    end
    f_int_dot = (f_env_2(t) - f_int)/T_f;
    f_int = f_int_dot*1/Fs + f_int;
    f_eff_dot = (f_int - f_eff)/T_f;
    f_eff = f_eff_dot*1/Fs + f_eff;
    f_eff_vec(t) = f_eff;
    if testingUnit <= index_slow
        Af_vec(t) = Af_slow_function(f_eff,Lce,Y);
    else
        Af_vec(t) = Af_fast_function(f_eff,Lce,S);
    end
end

force_2 = Af_vec*PT;
meanForce_2 = mean(force_2(3*Fs:4*Fs));
% test new model
f_env_CT = 2*(1 - exp(-(f_env/(0.3*2.1)).^2.1));
Af_CT = 1 - exp(-(f_env/(0.3*2.1)).^2.1);

[twitch,~,~] = twitch_function(Af_old,Lce,CT(testingUnit),RT(testingUnit),Fs);
twitch = alpha*twitch;
force_temp = conv(spikeTrain,twitch);
force = force_temp(1:length(time));
meanForce = mean(force(3*Fs:4*Fs));
reference = meanForce_2*0.01
error = abs(meanForce-meanForce_2)


force_filt = filtfilt(b,a,force);
P2PForce = 1-(max(force(3*Fs:4*Fs))-min(force(3*Fs:4*Fs)))/1

% Compare half contraction time
[~,loc_new] = min(abs((force_filt(1*Fs+1:1.3*Fs)-meanForce/2)));
t_ct_new = (time(1*Fs+1+loc_new)-time(1*Fs+1))
[~,loc_2] = min(abs((force_2(1*Fs+1:1.3*Fs)-meanForce_2/2)));
t_ct_2 = (time(1*Fs+1+loc_2)-time(1*Fs+1))

% Compare half relaxation time
cutoff = 4;
[~,loc_new_mean] = min(abs((force_filt(round(cutoff*Fs)+1:4.3*Fs)-meanForce)));
[~,loc_new_hr] = min(abs((force_filt(round(cutoff*Fs)+1+loc_new_mean:4.3*Fs)-meanForce/2)));
t_hr_new = (time(round(cutoff*Fs)+1+loc_new_mean+loc_new_hr)-time(round(cutoff*Fs)+1+loc_new_mean))
[~,loc_2] = min(abs((force_2(4*Fs+1:4.5*Fs)-meanForce_2/2)));
t_hr_2 = (time(4*Fs+1+loc_2)-time(4*Fs+1))

figure(1)
plot(time,force,'LineWidth',1,'Color',[0.078,0,0.831])
hold on
line([time(1) time(end)],[meanForce meanForce],'Color','red','LineWidth',2)
hold on
plot(time,force_filt,'LineWidth',1)
hold on
plot(time,Af_vec*PT,'LineWidth',1)

%legend('New Model','Mean Force','Filtered New Model','Loeb Model')



% figure(2)
% plot(FR/FR_half(testingUnit),meanForce./meanForce(end))
% hold on
% plot(FR/FR_half(testingUnit),Af_old)
% xlabel('Frequency (f_{0.5})','FontSize',14)
% ylabel('Force (AU)','FontSize',14)
%
% figure(3)
% plot(FR,P2PForce)
% xlabel('Frequency (Hz)','FontSize',14)
% ylabel('Degree of Fusion (%)','FontSize',14)


%% function used
function [twitch,T1,T2_temp] = twitch_function(Af,Lce,CT,RT,Fs)
T1 = CT*Lce^2 + CT*Af/2;
T2_temp = (RT + RT*Af/2)/Lce; %;
T2 = T2_temp/1.68;
t_twitch = 0:1/Fs:5;
f_1 = t_twitch./T1.*exp(1-t_twitch./T1);
f_2 = t_twitch./T2.*exp(1-t_twitch./T2);

twitch = [f_1(1:round(T1*Fs+1)) f_2(round(T2*Fs+1):end)];
if length(twitch) < length(t_twitch)
    twitch = [twitch zeros(1,length(t_twitch)-length(twitch))];
else
    twitch = twitch(1:length(t_twitch));
end
end

function Af = Af_slow_function(f_eff,L,Y)
a_f = 0.56;
n_f0 = 2.1;
n_f1 = 5;
n_f = n_f0 + n_f1*(1/L-1);
Af = 1 - exp(-(Y*f_eff/(a_f*n_f))^n_f);
end

function Af = Af_fast_function(f_eff,L,S)
a_f = 0.56;
n_f0 = 2.1;
n_f1 = 3.3;
n_f = n_f0 + n_f1*(1/L-1);
Af = 1 - exp(-(S*f_eff/(a_f*n_f))^n_f);
end

function spikeTrain = spikeTrainGenerator(t,Fs,freq)

spikeTrain = zeros(1,length(t));
ISI = round(1/freq*Fs);
numSpikes = round(length(t)/ISI);
index = [1:numSpikes]*ISI;
index(index>length(t)) = [];
spikeTrain(index) = 1;
spikeTrain(1) = 1;

end