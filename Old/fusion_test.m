%--------------------------------------------------------------------------
% fusion_test.m
% Author: Akira Nagamori
% Last update: 4/3/17
% ---Code descriptions-----
% Ojbective: find twitch amplitudes for each motor unit
%
%--------------------------------------------------------------------------
close all
clear all
clc

%--------------------------------------------------------------------------
% F0 parameters
density = 1.06; % muscle density [g/cm^3]
L0 = 5.1; % optimal muscle length [cm]
mass = 0.02; % muscle mass [kg]
PCSA = (mass*1000)/(density*L0); % PCSA of muscle
sigma = 31.8; % specific tension
F0 = PCSA*sigma;
N_MU = 300; % number of motor units
i_MU = 1:N_MU; % index for motor units

%--------------------------------------------------------------------------
% Peak tetanus parameter
RP_MU = 25; %range of peak tension across motor untis in unit of fold
b_MU = log(RP_MU)/N_MU; %coefficient to establish a range of twich force values
P_MU = exp(b_MU*i_MU); %force generated by a motor unit as a function of its recruitment threshold

PTi = P_MU./sum(P_MU)*F0;
Pi_half = PTi./2; % half of peak tetanus amplitude of each unit
a_twitch = 0.016860913109322;
b_twitch = 0.012195538822182;
Pi_MU = a_twitch*exp(b_twitch*i_MU);
%--------------------------------------------------------------------------
% Recruitment parameters
%   Find recruitment threshold for individual units using exponential fit
F_pcsa_slow = 0.5; % fractional PSCA of slow-twitch motor units (0-1)
[error, index_slow] = min(abs(cumsum(PTi) - F0*F_pcsa_slow)); % index for the largest motor unit clacified as slow-twitch
Ur = 0.6; % recruitment threshold for the last recruited motor unit
Ur_1 = 0.01; % reruitment threshold for the first unit
f_RT = fit([1 N_MU]',[Ur_1 Ur]','exp1');
coeffs_f_RT = coeffvalues(f_RT);
U_th = coeffs_f_RT(1)*exp(coeffs_f_RT(2)*i_MU); % the resulting recruitment threshold for individual units
index_fast = 239;
%--------------------------------------------------------------------------
% Firing rate parameters
%   Find peak firing rates of individual units
MFR1_MU = 8; %minimum firing rate of first unit
MFRn_MU = 14; %minimum firing rate of last unit
RTEn_MU = U_th(end)-Ur_1;  %recruitment threshold of last unit
MFR_MU = MFR1_MU + (MFRn_MU-MFR1_MU) * ((U_th-Ur_1)./RTEn_MU);
PFR_MU = 4*MFR_MU; %peak firing rate
FR_half = PFR_MU./2; % firing rate at which half of maximum tension is achieved
g_e = (PFR_MU(end) - MFR_MU(end))/(1-U_th(end));
%--------------------------------------------------------------------------
% Contraction time and half relaxation time
%    Find contraction time and half relaxation time of individual units
%   Using Loeb's formulation that contraction time of individual units is
%   proportional to 1/FR_half (Brown & Loeb 2000 IV; Botterman et al., 1996)
CT_n = 20;
FR_half_n = FR_half(end);
CT = 1.5*(CT_n*FR_half_n)./FR_half;
CT = CT - (CT(end)-CT_n);
CT = CT/1000;
RT = CT;

%--------------------------------------------------------------------------
cv_MU = 0.1; %ISI variability as per coefficient of variation (=mean/SD)
Lce = 1;
Y = 1;
S = 0.96;
Af = 1;

Fs = 1000;
time = 0:1/Fs:20;

testingUnit = 300; % indeces for units tested
FR_test = MFR_MU(testingUnit):2:PFR_MU(testingUnit);

mean_force_all = zeros(1,length(FR_test));
mean_force_SD_all = zeros(1,length(FR_test));
SD_force_all = zeros(1,length(FR_test));
SD_force_SD_all = zeros(1,length(FR_test));
CoV_force_all = zeros(1,length(FR_test));
mean_FR_all = zeros(1,length(FR_test));
CoV_ISI_all = zeros(1,length(FR_test));

for k = 1:length(FR_test)
    n = testingUnit;
    
    amp = - MFR_MU(n)/g_e + U_th(n) + FR_test(k)/g_e;
    U = [zeros(1,1*Fs) (amp/2)*(0:1/Fs:2) amp*ones(1,length(time)-3*Fs-1)];
    
    
    mean_force = zeros(1,10);
    SD_force = zeros(1,10);
    CoV_force = zeros(1,10);
    
    mean_FR = zeros(1,10);
    CoV_ISI = zeros(1,10);
    
    for j = 1:10
        FR_mat = zeros(1,length(time));
        spike_train = zeros(1,length(time));
        force = zeros(1,length(time));
        for t = 1:length(time)
            if t > 1
                FR = g_e.*(U(t) - U_th(testingUnit)) + MFR_MU(n);
                f_env = FR/FR_half(n);
                if FR < MFR_MU(n)
                    FR = 0;
                elseif FR > PFR_MU(n)
                    FR = PFR_MU(n);
                end
                noise_FR = FR;
                FR_mat(t) = FR;
                
                if n <= index_fast
                    Af = Af_slow_function(f_env,Lce,Y);
                    Af_cor = Af_slow_correction_function(f_env,Lce,Y);
                else
                    Af = Af_fast_function(f_env,Lce,Y);
                    Af_cor = Af_fast_correction_function(f_env,Lce,Y);
                end
                
                spike_train_temp = zeros(1,length(time));
                if FR >= MFR_MU(n)
                    if ~any(spike_train) % initial time
                        spike_train(t) = 1;
                        spike_train_temp(t) = 1;                        
                        mu = 1/FR;
                        Z = randn(1);
                        Z(Z>3.9) = 3.9;
                        Z(Z<-3.9) = -3.9;
                        noise = 1/noise_FR*cv_MU*Z;
                        spike_time_temp = (mu + noise)*Fs;
                        if spike_time_temp < 2*1000/Fs
                            spike_time_temp = 2;
                        end
                        spike_time = round(spike_time_temp) + t;
                        
%                         if n <= index_fast
%                             Af = Af_slow_function(f_env,Lce,Y);
%                             Af_cor = Af_slow_correction_function(f_env,Lce,Y);
%                         else
%                             Af = Af_fast_function(f_env,Lce,Y);
%                             Af_cor = Af_fast_correction_function(f_env,Lce,Y);
%                         end
                        
                        [twitch,~,~] = twitch_function(Af,Lce,CT(n),RT(n),Fs);
                        force_temp = conv(spike_train_temp,Pi_MU(n)*twitch*Af_cor);
                        force = force + force_temp(1:length(time));
                        spike_time_previous = t;
                    else
                        if spike_time == t
                            spike_train(t) = 1;
                            spike_train_temp(t) = 1;                            
                            mu = 1/FR;
                            Z = randn(1);
                            Z(Z>3.9) = 3.9;
                            Z(Z<-3.9) = -3.9;
                            noise = 1/noise_FR*cv_MU*Z;
                            spike_time_temp = (mu + noise)*Fs;
                            if spike_time_temp < 2*1000/Fs
                                spike_time_temp = 2;
                            end
                            spike_time = round(spike_time_temp) + t;
                            
                            ISI = (t-spike_time_previous)/Fs;
                            FR_temp = 1/ISI;
                            if n <= index_fast
                                Af = Af_slow_function(FR_temp/FR_half(n),Lce,Y);
                                Af_cor = Af_slow_correction_function(FR_temp/FR_half(n),Lce,Y);
                            else
                                Af = Af_fast_function(FR_temp/FR_half(n),Lce,Y);
                                Af_cor = Af_fast_correction_function(FR_temp/FR_half(n),Lce,Y);
                            end
                            %ISI = mu;
                            [twitch,~,~] = twitch_function(Af,Lce,CT(n),RT(n),Fs);
                            force_temp = conv(spike_train_temp,Pi_MU(n)*twitch*Af_cor);
                            force = force + force_temp(1:length(time));
                            spike_time_previous = t;
                        elseif FR_mat(t-1) == 0
                            spike_train(t) = 1;
                            spike_train_temp(t) = 1;
                            
                            mu = 1/FR;
                            Z = randn(1);
                            Z(Z>3.9) = 3.9;
                            Z(Z<-3.9) = -3.9;
                            noise = 1/noise_FR*cv_MU*Z;
                            spike_time_temp = (mu + noise)*Fs;
                            if spike_time_temp < 2*1000/Fs
                                spike_time_temp = 2;
                            end
                            spike_time = round(spike_time_temp) + t;
                            if n <= index_fast
                                Af = Af_slow_function(f_env,Lce,Y);
                                Af_cor = Af_slow_correction_function(f_env,Lce,Y);
                            else
                                Af = Af_fast_function(f_env,Lce,Y);
                                Af_cor = Af_fast_correction_function(f_env,Lce,Y);
                            end
                            [twitch,~,~] = twitch_function(Af,Lce,CT(n),RT(n),Fs);
                            force_temp = conv(spike_train_temp,Pi_MU(n)*twitch*Af_cor);
                            force = force + force_temp(1:length(time));
                            
                            spike_time_previous = t;
                        end
                    end
                end
            end           
        end
        
        figure(1)
        plot(time,force)
        hold on
        
        mean_force(j) = mean(force(5*Fs+1:end));
        SD_force(j) = std(force(5*Fs+1:end));
        CoV_force(j) = SD_force/mean_force;
        
        index_spike = find(spike_train(5*Fs+1:end)==1);
        index_spike_diff = diff(index_spike)./Fs;
        mean_ISI = mean(index_spike_diff);
        SD_ISI = std(index_spike_diff);
        CoV_ISI(j) = SD_ISI/mean_ISI;
        mean_FR(j) = mean(1./index_spike_diff);
    end
    
    mean_force_all(k) = mean(mean_force);
    mean_force_SD_all(k) = std(mean_force);
    SD_force_all(k) = mean(SD_force);
    SD_force_SD_all(k) = std(SD_force);
    CoV_force_all(k) = mean(CoV_force);
    
    mean(mean_FR)
    mean(CoV_ISI)
    
    mean_FR_all(k) = mean(mean_FR);
    CoV_ISI_all(k) = mean(CoV_ISI);
end

figure(2)
plot(FR_test,mean_force_all)
xlabel('Firing Rate (Hz)','FontSize',14)
ylabel('Mean Force (N)','FontSize',14)

%%
figure(3)
f3 = errorbar(FR_test,SD_force_all,SD_force_SD_all,'-','Color',[0.078,0,0.831],'LineWidth',2,'Marker','o','MarkerFaceColor',[0.078,0,0.831]);
xlabel('Firing Rate (Hz)','FontSize',14,'fontweight','bold')
ylabel('SD (N)','FontSize',14,'fontweight','bold')
% xt = get(gca,'XTickLabel');
% set(gca,'XTickLabel',xt,'fontsize',14)
% yt = get(gca,'YTickLabel');
% set(gca,'YTickLabel',yt,'fontsize',14)

%%
figure(4)
plot(FR_test,CoV_force_all*100)
xlabel('Firing Rate (Hz)','FontSize',14)
ylabel('CoV (%)','FontSize',14)


%%
function [twitch,T1,T2_temp] = twitch_function(Af,Lce,CT,RT,Fs)
T1 = CT*Lce^2+CT*Af;
T2_temp = (RT + RT*Af)/Lce;
T2 = T2_temp/1.68;
t_twitch = 0:1/Fs:1;
f_1 = t_twitch./T1.*exp(1-t_twitch./T1);
f_2 = t_twitch./T2.*exp(1-t_twitch./T2);

twitch = [f_1(1:round(T1*Fs+1)) f_2(round(T2*Fs+1):end)];
twitch = twitch(1:length(t_twitch));

end

function Af = Af_slow_function(f_env,L,Y)
a_f = 0.56;
n_f0 = 2.1;
n_f1 = 5;
n_f = n_f0 + n_f1*(1/L-1);
Af = 1 - exp(-(Y*f_env/(a_f*n_f))^n_f);
end

function Af = Af_fast_function(f_env,L,S)
a_f = 0.56;
n_f0 = 2.1;
n_f1 = 3.3;
n_f = n_f0 + n_f1*(1/L-1);
Af = 1 - exp(-(S*f_env/(a_f*n_f))^n_f);

end

function FF = Af_slow_correction_function(f_env,L,Y)
a_f = 0.56;
n_f0 = 2.1;
n_f1 = 5;
n_f = n_f0 + n_f1*(1/L-1);
FF = 1 - exp(-(Y*f_env/(a_f*n_f))^n_f);
offset = 0.375*L - 0.1775;
alpha = 1-offset;
FF = FF*alpha+offset;
FF = FF/f_env;
if FF > 1
    FF = 1;
end
end

function FF = Af_fast_correction_function(f_env,L,S)
a_f = 0.56;
n_f0 = 2.1;
n_f1 = 3.3;
n_f = n_f0 + n_f1*(1/L-1);
FF = 1 - exp(-(S*f_env/(a_f*n_f))^n_f);
offset = 0.375*L - 0.1775;
alpha = 1-offset;
FF = FF*alpha+offset;
FF = FF/f_env;
if FF > 1
    FF = 1;
end
end
