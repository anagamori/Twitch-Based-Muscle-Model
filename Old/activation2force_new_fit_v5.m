%--------------------------------------------------------------------------
% activation2force_new_fit_v4.m
% Author: Akira Nagamori
% Last update: 7/18/18
% Code descriptions
% Ojbective: test new model
%--------------------------------------------------------------------------

close all
clear all
clc
%--------------------------------------------------------------------------
% motor unit parameters
N_MU = 120; % number of motor units
i_MU = 1:N_MU; % index for motor units

%--------------------------------------------------------------------------
L0 = 3;
density = 1.06; % muscle density [g/cm^3]
mass = 0.02; % muscle mass [kg]
PCSA = (mass*1000)/(density*L0); % PCSA of muscle
sigma = 22.4; % specific tension
F0 = PCSA*sigma;

%--------------------------------------------------------------------------
% Peak tetanus parameter
RP_MU = 25; %range of peak tension across motor untis in unit of fold
b_MU = log(RP_MU)/N_MU; %coefficient to establish a range of twich force values
P_MU = exp(b_MU*i_MU); %force generated by a motor unit as a function of its recruitment threshold

PTi = P_MU./sum(P_MU)*F0;
a_twitch = 0.014061531587007;
b_twitch = 0.030319762726547;
Pi_MU = a_twitch*exp(b_twitch*i_MU);

F_pcsa_slow = 0.5; % fractional PSCA of slow-twitch motor units (0-1)
[~, index_slow] = min(abs(cumsum(PTi) - F0*F_pcsa_slow)); % index for the largest motor unit clacified as slow-twitch
%--------------------------------------------------------------------------
Ur = 0.6; % recruitment threshold for the lastly recruited motor unit
Ur_1 = 0.01; % reruitment threshold for the first unit
b_Ur = log(Ur/Ur_1)/N_MU;
U_th = exp(b_Ur*i_MU)/100;

MFR1_MU = 8; %minimum firing rate of first unit
MFRn_MU = 14; %minimum firing rate of last unit
RTEn_MU = U_th(end)-Ur_1;  %recruitment threshold of last unit
MFR_MU = MFR1_MU + (MFRn_MU-MFR1_MU) * ((U_th-Ur_1)./RTEn_MU);
PFR_MU = 4*MFR_MU; %peak firing rate
FR_half = PFR_MU./2; % firing rate at which half of maximum tension is achieved
fast_index = 89;

CT_n = 30;
CT_1 = 90;
slope_CT = (CT_1 - CT_n)/(FR_half(1)-FR_half(end));
intercept_CT = CT_1-slope_CT*FR_half(1);
CT = slope_CT*FR_half+intercept_CT;
CT = CT/1000;
RT = CT;

Fs = 1000;
time = 0:1/Fs:5;
t_temp = 0:1/Fs:3;
%--------------------------------------------------------------------------
% simulation parameters
Lce_long= [0.6 0.8 1 1.2];
Y = 1;
S = 0.96;

for j = 1:4
    Lce = Lce_long(j);
    %--------------------------------------------------------------------------
    % Determine twitch-tetanus ratio from Stephens et al. (1975) (see Tw2Tet_fit_Stephens.m)
    a1_Tw2Tet = 0;
    b1_Tw2Tet = 0.9607;
    c1_Tw2Tet = 0.003597;
    a2_Tw2Tet = 0.1882;
    b2_Tw2Tet = 0.706;
    c2_Tw2Tet = 0.1679;
    a3_Tw2Tet = 0.5776;
    b3_Tw2Tet = 0.9928;
    c3_Tw2Tet = 0.3403;
    a4_Tw2Tet = 0.4059;
    b4_Tw2Tet = 0.9397;
    c4_Tw2Tet = 1.541;
    twitch2tetanus_ratio = a1_Tw2Tet*exp(-((Lce-b1_Tw2Tet)/c1_Tw2Tet).^2) + a2_Tw2Tet*exp(-((Lce-b2_Tw2Tet)/c2_Tw2Tet).^2) ...
        + a3_Tw2Tet*exp(-((Lce-b3_Tw2Tet)/c3_Tw2Tet).^2) + a4_Tw2Tet*exp(-((Lce-b4_Tw2Tet)/c4_Tw2Tet).^2);
    twitch2tetanus_ratio = 0.2*twitch2tetanus_ratio;
    PT = 1/twitch2tetanus_ratio;
    
    %--------------------------------------------------------------------------
    % Determine contraction time from Stephens et al. (1975) (see CT_HRT_fit_Stephens.m)
    a1_CT = 0.416;
    b1_CT = 1.235;
    c1_CT = 0.45;
    a2_CT = 1.015;
    b2_CT = -9.718;
    c2_CT = 17.24;
    CT_fit =  a1_CT*exp(-((Lce-b1_CT)/c1_CT).^2) + a2_CT*exp(-((Lce-b2_CT)/c2_CT).^2);
    CT = CT*CT_fit;
    
    a1_HRT = 1.114;
    b1_HRT = 1.446;
    c1_HRT = 0.7234;
    a2_HRT = 0.09588;
    b2_HRT = 1.192;
    c2_HRT = 0.194;
    a3_HRT = 0.8869;
    b3_HRT = -0.4906;
    c3_HRT = 1.271;
    HRT_fit =  a1_HRT*exp(-((Lce-b1_HRT)/c1_HRT).^2) + a2_HRT*exp(-((Lce-b2_HRT)/c2_HRT).^2) + a3_HRT*exp(-((Lce-b3_HRT)/c3_HRT).^2);
    RT = RT*HRT_fit;
    %--------------------------------------------------------------------------
    % Find an index of representative slow twitch fiber
    % From Burke et al. (1974), fibers types between slow and fast can be differentiable based on the length of contraction time
    % A unit that has contraction time closest to mean contraction time of all
    % slow twitch fibers is defined as a representative unit of slow twitch.
    mean_CT_slow = mean(CT(1:index_slow));
    [~, index_slow_rep] = min(abs(CT(1:index_slow) - mean_CT_slow));
    
    testingUnit =  1; %index_slow_rep;
    
    %FR = [2 5 10 14 18 22 26 30 34 38 42 46 50 54 58 62 64 68 72 76 80 84];
    FR = [2 5:3:3*FR_half(testingUnit) 3*FR_half(testingUnit)];
    %FR = [2 0.5*FR_half(testingUnit) 1*FR_half(testingUnit) 2*FR_half(testingUnit) 3*FR_half(testingUnit)];
    % Use average twitch-tetanus ratio (0.3) for slow twitch fibers from Burke
    % et al. (1974)
    %% Obtain non-corrected activation-force relationship
    
    meanForce = zeros(1,length(FR));
    P2PForce = zeros(1,length(FR));
    Af_old = zeros(1,length(FR));
    
    for i = 1:length(FR)
        %force = zeros(1,length(time));
        f_env = FR(i)/FR_half(testingUnit);
        spikeTrain_temp = spikeTrainGenerator(t_temp,Fs,FR(i));
        spikeTrain = [zeros(1,1*Fs) spikeTrain_temp zeros(1,1*Fs)];
        
        f_env_2 = [zeros(1,1*Fs) f_env*ones(1,length(spikeTrain_temp)) zeros(1,1*Fs)];
        f_int = 0;
        f_eff = 0;
        f_eff_dot = 0;
        f_eff_vec = zeros(1,length(f_env_2));
        Af_vec = zeros(1,length(f_env_2));
        
        if testingUnit <= index_slow
            Af_old(i) = Af_slow_function(f_env,Lce,Y);
            Af = Af_slow_function(f_env,Lce,Y);
        else
            Af_old(i) = Af_fast_function(f_env,Lce,S);
            Af = Af_fast_function(f_env,Lce,S);
        end
        
        for t = 1:length(f_env_2)
            if f_eff_dot >= 0
                T_f = 0.0343 + 0.0227*f_env;
            else
                T_f = (0.047+0.0252*Af_old(i));
            end
            f_int_dot = (f_env_2(t) - f_int)/T_f;
            f_int = f_int_dot*1/Fs + f_int;
            f_eff_dot = (f_int - f_eff)/T_f;
            f_eff = f_eff_dot*1/Fs + f_eff;
            f_eff_vec(t) = f_eff;
            if testingUnit <= index_slow
                Af_temp = Af_slow_function(f_env,Lce,Y);
            else
                Af_temp = Af_fast_function(f_env,Lce,S);
            end
            Af_vec(t) = Af_temp;
        end
        
        a = 12.56*exp(-4.229*Lce); %2*rand(1); 1 for Lce = 0.6, 0.4 for Lce = 0.8, 0.2 for Lce = 1.2
        b = 12.56*exp(-4.229*Lce);
        
        T1 = CT(testingUnit)+CT(testingUnit)*Af_old(i)*a;% *1.1;
        T2_temp = (RT(testingUnit) + RT(testingUnit)*Af_old(i)*b);
        
        T2 = T2_temp/1.68;
        t_twitch = 0:1/Fs:5;
        f_1 = t_twitch./T1.*exp(1-t_twitch./T1);
        f_2 = t_twitch./T2.*exp(1-t_twitch./T2);
        
        twitch = [f_1(1:round(T1*Fs+1)) f_2(round(T2*Fs+1):end)];
        if length(twitch) < length(t_twitch)
            twitch = [twitch zeros(1,length(t_twitch)-length(twitch))];
        else
            twitch = twitch(1:length(t_twitch));
        end
        
        p1 = 0.2907*Lce^2-0.2188*Lce-0.02227;
        p2 = -3.014*Lce^2+2.444*Lce-0.01779;
        p3 = 12.2*Lce^2-10.9*Lce+1.44;
        p4 = -23.92*Lce^2+24.07*Lce-6.405;
        p5 = 22.23*Lce^2-25.61*Lce+10.36;
        p6 = 15.6*Lce^3-48.98*Lce^2+45.43*Lce-15.51;
        p7 = -1.729*Lce^3+5.212*Lce^2-4.798*Lce+2.648;
        alpha = p1*f_env^6 + p2*f_env^5 + p3*f_env^4 + p4*f_env^3 + p5*f_env^2 + p6*f_env + p7;
        
        twitch = alpha*twitch*twitch2tetanus_ratio; %*PTi(1)*0.3;
        force_temp = conv(spikeTrain,twitch);
        force = force_temp(1:length(time));
        
        force_model = Af_old(i);
        
        meanForce(i) = mean(force(3*Fs:4*Fs));
        P2PForce(i) = 1-(max(force(3*Fs:4*Fs))-min(force(3*Fs:4*Fs)))/twitch2tetanus_ratio;
        
        
    end
    figure(1)
    %plot(FR/FR_half(testingUnit),meanForce./max(meanForce)*100,'LineWidth',1,'Color',[0.078,0,0.831])
    plot(FR/FR_half(testingUnit),meanForce,'LineWidth',1) %; ,'Color',[0.078,0,0.831])
    xlabel('Frequency (f_{0.5})','FontSize',14)
    ylabel('Force (%)','FontSize',14)
    hold on
    
end


%
FR_Macefield = [5,8,10,15,20,30,50,80,100];
fusion_Macefield = [1.4,2.5,3.42,4.16,4.4,4.45,4.76,4.76,4.76]*20;
figure(3)
plot(FR/FR_half(testingUnit),P2PForce*100,'LineWidth',1,'Color',[0.078,0,0.831])
hold on
plot(FR_Macefield/10,fusion_Macefield,'LineWidth',1)
xlabel('Frequency (Hz)','FontSize',14)
ylabel('Degree of Fusion (%)','FontSize',14)
xlim([0 4])

%% function used

function Af = Af_slow_function(f_eff,L,Y)
a_f = 0.56;
n_f0 = 2;
n_f1 = 1;
n_f = n_f0 + n_f1*(1/L-1);
Af = 1 - exp(-(Y*f_eff/(a_f*n_f))^n_f);
end

function Af = Af_fast_function(f_eff,L,S)
a_f = 0.56;
n_f0 = 2;
n_f1 = 3.3;
n_f = n_f0 + n_f1*(1/L-1);
Af = 1 - exp(-(S*f_eff/(a_f*n_f))^n_f);
end

function spikeTrain = spikeTrainGenerator(t,Fs,freq)

spikeTrain = zeros(1,length(t));
ISI = round(1/freq*Fs);
numSpikes = round(length(t)/ISI);
index = [1:numSpikes]*ISI;
index(index>length(t)) = [];
spikeTrain(index) = 1;
spikeTrain(1) = 1;

end