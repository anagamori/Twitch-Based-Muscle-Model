%==========================================================================
% new_model_muscle_parameters.m
% Author: Akira Nagamori
% Last update: 2/24/119
% Descriptions:
%   Define parameters related to muscle 
%       - muscle architecture (e.g., muscle length, tendon length)
%       - tetanic tension of whole muscle and individual motor units
%       - distribution of contraction time across motor units
%==========================================================================

%% Muscle architectural parameters
modelParameter.pennationAngle = 9.6*pi/180; %[radians]
modelParameter.optimalLength = 6.8; % [cm]
modelParameter.tendonSlackLength = 24.1; % [cm]
modelParameter.mass = 0.01; % [g]
modelParameter.muscleInitialLength = 6.8; % [cm]
modelParameter.tendonInitialLength = 24.1; % [cm]

density = 1.06; %
L0 = modelParameter.optimalLength; % optimal muscle length [cm]
mass = modelParameter.mass; % muscle mass [kg]
PCSA = (mass*1000)/(density*L0); % PCSA of muscle
sigma = 22.4; % specific tension
F0 = PCSA * sigma; % maximal force

L_tendon = modelParameter.tendonSlackLength;
L0T = L_tendon*1.05;
alpha = modelParameter.pennationAngle;
Lm_initial = modelParameter.muscleInitialLength; % muscle initial length
Lt_initial = modelParameter.tendonInitialLength; % tendon initial length
Lmt = Lm_initial*cos(alpha)+Lt_initial; % intial musculotendon length

%--------------------------------------------------------------------------
% Motor unit architecture
N_MU = 300; % number of motor units
i_MU = 1:N_MU; % index for motor units

%--------------------------------------------------------------------------
% Peak tetanic force
RP_MU = 25; %range of peak tension across motor untis in unit of fold
b_MU = log(RP_MU)/N_MU; %coefficient to establish a range of twich force values
P_MU = exp(b_MU*i_MU); %force generated by a motor unit as a function of its recruitment threshold
PTi = P_MU./sum(P_MU)*F0; % peak tetanic force for individual units

%--------------------------------------------------------------------------
% Fractional PSCA
F_pcsa_slow = 0.3; % fractional PSCA of slow-twitch motor units (0-1)
[~, index_slow] = min(abs(cumsum(PTi) - F0*F_pcsa_slow)); 

%% Contraction time
% Generate a distribution of contraction time across motor units based on
% Rayleigh distribution
rng(1)
min_CT = 20; %minimum contraction time [ms]
CT = round(raylrnd(23,1,N_MU)+min_CT); %contraction time of individual motor units [ms]
histogram(CT)
CT_sorted = sort(CT,'descend');
CT_fastest_slow = CT_sorted(index_slow);
mean(CT_sorted(1:index_slow)) %average contraction time of slow-twitch MUs
mean(CT_sorted(index_slow+1:end)) %average contraction time of fast-twitch MUs
