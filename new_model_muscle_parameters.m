%==========================================================================
% new_model_muscle_parameters.m
% Author: Akira Nagamori
% Last update: 3/4/19
% Descriptions:
%   Define parameters related to muscle 
%       - muscle architecture (e.g., muscle length, tendon length)
%       - tetanic tension of whole muscle and individual motor units
%       - distribution of contraction time across motor units
%==========================================================================

%% 
figure_folder = '/Users/akiranagamori/Documents/GitHub/Twitch-Based-Muscle-Model/Figures';
code_folder = '/Users/akiranagamori/Documents/GitHub/Twitch-Based-Muscle-Model';
%% Muscle architectural parameters
modelParameter.pennationAngle = 9.6*pi/180; %[radians]
modelParameter.optimalLength = 6.8; % [cm]
modelParameter.tendonSlackLength = 24.1; % [cm]
modelParameter.mass = 0.01; % [g]
modelParameter.muscleInitialLength = 6.8; % [cm]
modelParameter.tendonInitialLength = 24.1; % [cm]
density = 1.06; %
L0 = modelParameter.optimalLength; % optimal muscle length [cm]
mass = modelParameter.mass; % muscle mass [kg]
PCSA = (mass*1000)/(density*L0); % PCSA of muscle
sigma = 31.8; % specific tension
F0 = PCSA * sigma; % maximal force

L_tendon = modelParameter.tendonSlackLength;
L0T = L_tendon*1.05;
alpha = modelParameter.pennationAngle;
Lm_initial = modelParameter.muscleInitialLength; % muscle initial length
Lt_initial = modelParameter.tendonInitialLength; % tendon initial length
Lmt = Lm_initial*cos(alpha)+Lt_initial; % intial musculotendon length
%[L_ce,L_se,Lmax] =  InitialLength_function(modelParameter);

%--------------------------------------------------------------------------
% Motor unit architecture
N_MU = 300; % number of motor units
i_MU = 1:N_MU; % index for motor units

%% Peak tetanic force
RP_MU = 25; %range of peak tension across motor untis in unit of fold
b_MU = log(RP_MU)/N_MU; %coefficient to establish a range of twich force values
P_MU = exp(b_MU*i_MU); %force generated by a motor unit as a function of its recruitment threshold
PTi = P_MU./sum(P_MU)*F0; % peak tetanic force for individual units

figure(1)
histogram(PTi)
xlabel('Peak Tetanic Force (N)','FontSize',14)
ylabel('Count','FontSize',14)
title('Distribution of peak tetanic tension','FontSize',16)
set(gca,'TickDir','out');
set(gca,'box','off')
text(max(PTi)*0.8,60,['Max:' num2str(round(max(PTi),2)) 'N'],'FontSize',14)
text(max(PTi)*0.8,50,['Min:' num2str(round(min(PTi),2)) 'N'],'FontSize',14)
cd (figure_folder)
saveas(gcf,'peak_tetanic_tension','pdf')
cd (code_folder)
%% Fractional PSCA
F_pcsa_slow = 0.3; % fractional PSCA of slow-twitch motor units (0-1)
[~, index_slow] = min(abs(cumsum(PTi) - F0*F_pcsa_slow)); 

%% Contraction time
load('CT_vec')
modelParameter.CT = CT_vec;
CT_vec = modelParameter.CT;
[~,index_CT] = sort(CT_vec,'descend');

figure(2)
histogram(CT_vec)
xlabel('Contraction Time (ms)','FontSize',14)
ylabel('Count','FontSize',14)
title('Distribution of contraction time','FontSize',16)
set(gca,'TickDir','out');
set(gca,'box','off')
text(max(CT_vec)*0.8,60,['Max:' num2str(round(max(CT_vec),2)) 'ms'],'FontSize',14)
text(max(CT_vec)*0.8,50,['Min:' num2str(round(min(CT_vec),2)) 'ms'],'FontSize',14)
cd (figure_folder)
saveas(gcf,'contraction_time','pdf')
cd (code_folder)


%% Assign peak tetanic force into each unit
% shuffle indexes within each fiber type with respect to contraction time
% this will allow us to randomly assign peak tetanic tension to each motor
% unit with different contraction time
rng(1)
R_slow = randperm(index_slow);
index_fast = index_slow+1:N_MU;
R_fast_temp = randperm(length(index_fast));
R_fast = index_fast(R_fast_temp);
index_MU_PTi = [R_slow R_fast]; % vector of indexes to match peak tetanic tension to appropriate contraction time
PTi_new = PTi (index_MU_PTi);

figure(3)
plot(CT_vec(1:index_slow),PTi_new(1:index_slow),'o','Color','b')
hold on 
plot(CT_vec(index_slow+1:end),PTi_new(index_slow+1:end),'o','Color','r')
xlabel('Contraction time (ms)','FontSize',14)
ylabel('Peak Tetanic Tension (N)','FontSize',14)
title('Contraction time vs. peak tetanic tension','FontSize',16)
legend('Slow-twitch','Fast-twitch')
set(gca,'TickDir','out');
set(gca,'box','off')
cd (figure_folder)
saveas(gcf,'CTvsPT','pdf')
cd (code_folder)

%% Recruitment threshold
% Find recruitment threshold for individual units using exponential fit
% Recruitment threshold is correlated to peak tetanic tension
%   Use index_MU_PTi to appropriately index each MU
Ur = 0.8; % recruitment threshold for the lastly recruited motor unit
Ur_1 = 0.01; % reruitment threshold for the first unit
f_RT = fit([1 N_MU]',[Ur_1 Ur]','exp1');
coeffs_f_RT = coeffvalues(f_RT);
U_th = coeffs_f_RT(1)*exp(coeffs_f_RT(2)*i_MU); % the resulting recruitment threshold for individual units
U_th_new = U_th(index_MU_PTi);

figure(4)
loglog(U_th,PTi,'o')
xlabel('Recruitment Threshold (log(%MVC))','FontSize',14)
ylabel('Peak Tetanic Tension (log(N))','FontSize',14)
title('Recruitment threshold vs. peak tetanic force','FontSize',16)
set(gca,'TickDir','out');
set(gca,'box','off')
cd (figure_folder)
saveas(gcf,'RTvsPT','pdf')
cd (code_folder)

%% Minimum and maximum firing rate
load('FR_half')
modelParameter.FR_half = FR_half;
FR_half = modelParameter.FR_half;
MDR = FR_half/2;
PDR = FR_half*2;

figure(5)
plot(CT_vec,FR_half,'o')
xlabel('Contraction time (ms)','FontSize',14)
ylabel('F_{0.5} (Hz)','FontSize',14)
title('Contraction time vs. F_{0.5}','FontSize',16)
set(gca,'TickDir','out');
set(gca,'box','off')
% cd (figure_folder)
% saveas(gcf,'CTvsFR_half','pdf')
% cd (code_folder)

%% Twitch-tetanus ratio histogram
load('t2t')
mean_t2t_slow = mean(t2t(1:index_slow));
mean_t2t_fast = mean(t2t(index_slow+1:end));
figure(6)
histogram(t2t(1:index_slow),'BinWidth',0.05,'FaceColor','b')
hold on 
histogram(t2t(index_slow+1:end),'BinWidth',0.05,'FaceColor','r')
plot([mean_t2t_slow mean_t2t_slow],[0 80],'LineWidth',2,'Color','k')
plot([mean_t2t_fast mean_t2t_fast],[0 80],'LineWidth',2,'Color','k')
xlabel('Twitch-tetanus ratio (ms)','FontSize',14)
ylabel('Count','FontSize',14)
title('Distribution of twitch-tetanus ratio','FontSize',16)
legend('Slow twitch','Fast twitch')
set(gca,'TickDir','out');
set(gca,'box','off')
text(max(t2t)*0.8,60,['Max:' num2str(round(max(t2t),3))],'FontSize',14)
text(max(t2t)*0.8,50,['Min:' num2str(round(min(t2t),3))],'FontSize',14)
text(mean_t2t_slow*1.1,75,['Mean:' num2str(round(mean_t2t_slow,3))],'FontSize',14)
text(mean_t2t_fast*1.1,75,['Mean:' num2str(round(mean_t2t_fast,3))],'FontSize',14)
hold off
cd (figure_folder)
saveas(gcf,'t2t','pdf')
cd (code_folder)

%% Twitch-tetanus ratio vs. peak tetanic force and contraction time
mdl = fitlm(PTi_new,t2t);
coeff_fit = mdl.Coefficients.Estimate;
Rsqaured_fit = mdl.Rsquared.Ordinary;

mdl_2 = fitlm(CT_vec,t2t);
coeff_fit_2 = mdl_2.Coefficients.Estimate;
Rsqaured_fit_2 = mdl_2.Rsquared.Ordinary;

figure(7)
subplot(1,2,1)
plot(PTi_new(1:index_slow),t2t(1:index_slow),'o','Color','b')
hold on 
plot(PTi_new(index_slow+1:end),t2t(index_slow+1:end),'o','Color','r')
plot(PTi_new,coeff_fit(1)+PTi_new*coeff_fit(2),'Color','k','LineWidth',2)
text(max(PTi_new)*0.7,max(t2t),['r = ' num2str(round(sqrt(Rsqaured_fit),3))],'FontSize',14)
hold off
xlabel('Peak Tetanic Force (N)','FontSize',14)
ylabel('Twitch-Tetanus Ratio','FontSize',14)
title({'Peak Tetanic Force vs.';'peak twitch force'},'FontSize',16)
set(gca,'TickDir','out');
set(gca,'box','off')
subplot(1,2,2)
plot(CT_vec(1:index_slow),t2t(1:index_slow),'o','Color','b')
hold on 
plot(CT_vec(index_slow+1:end),t2t(index_slow+1:end),'o','Color','r')
plot(CT_vec,coeff_fit_2(1)+CT_vec*coeff_fit_2(2),'Color','k','LineWidth',2)
text(max(CT_vec)*0.7,max(t2t),['r = ' num2str(round(sqrt(Rsqaured_fit_2),3))],'FontSize',14)
hold off
xlabel('Contraction Time (ms)','FontSize',14)
ylabel('Twitch-Tetanus Ratio','FontSize',14)
title({'Contraction Time vs.';'peak twitch force'},'FontSize',16)
set(gca,'TickDir','out');
set(gca,'box','off')
cd (figure_folder)
saveas(gcf,'PTvst2t','pdf')
cd (code_folder)

%% Twitch-tetanus ratio: individual fiber types
mdl_3 = fitlm(CT_vec(1:index_slow),t2t(1:index_slow));
coeff_fit_3 = mdl_3.Coefficients.Estimate;
Rsqaured_fit_3 = mdl_3.Rsquared.Ordinary;
mdl_4 = fitlm(CT_vec(index_slow+1:end),t2t(index_slow+1:end));
coeff_fit_4 = mdl_4.Coefficients.Estimate;
Rsqaured_fit_4 = mdl_4.Rsquared.Ordinary;

figure(8)
plot(CT_vec(1:index_slow),t2t(1:index_slow),'o','Color','b')
hold on 
plot(CT_vec(index_slow+1:end),t2t(index_slow+1:end),'o','Color','r')
plot(CT_vec(1:index_slow),coeff_fit_3(1)+CT_vec(1:index_slow)*coeff_fit_3(2),'Color','k','LineWidth',2)
plot(CT_vec(index_slow+1:end),coeff_fit_4(1)+CT_vec(index_slow+1:end)*coeff_fit_4(2),'Color','k','LineWidth',2)
text(max(CT_vec)*0.3,max(t2t),['r = ' num2str(round(sqrt(Rsqaured_fit_3),3))],'FontSize',14)
text(max(CT_vec)*0.7,max(t2t)*0.8,['r = ' num2str(round(sqrt(Rsqaured_fit_4),3))],'FontSize',14)
hold off
xlabel('Contraction Time (ms)','FontSize',14)
ylabel('Twitch-Tetanus Ratio','FontSize',14)
title('Contraction Time vs. Twitch-Tetanus Ratio','FontSize',16)
set(gca,'TickDir','out');
set(gca,'box','off')
cd (figure_folder)
saveas(gcf,'CTvst2t_fiberType','pdf')
cd (code_folder)

%% Twitch-tetanus ratio vs. tetanic tension: individual fiber types
mdl_5 = fitlm(PTi_new(1:index_slow),t2t(1:index_slow));
coeff_fit_5 = mdl_5.Coefficients.Estimate;
Rsqaured_fit_5 = mdl_5.Rsquared.Ordinary;
mdl_6 = fitlm(PTi_new(index_slow+1:end),t2t(index_slow+1:end));
coeff_fit_6 = mdl_6.Coefficients.Estimate;
Rsqaured_fit_6 = mdl_6.Rsquared.Ordinary;

figure(9)
plot(PTi_new(1:index_slow),t2t(1:index_slow),'o','Color','b')
hold on 
plot(PTi_new(index_slow+1:end),t2t(index_slow+1:end),'o','Color','r')
plot(PTi_new(1:index_slow),coeff_fit_5(1)+PTi_new(1:index_slow)*coeff_fit_5(2),'Color','k','LineWidth',2)
plot(PTi_new(index_slow+1:end),coeff_fit_6(1)+PTi_new(index_slow+1:end)*coeff_fit_6(2),'Color','k','LineWidth',2)
text(max(PTi_new)*0.1,max(t2t)*0.8,['r = ' num2str(round(sqrt(Rsqaured_fit_5),3))],'FontSize',14)
text(max(PTi_new)*0.6,max(t2t)*0.9,['r = ' num2str(round(sqrt(Rsqaured_fit_6),3))],'FontSize',14)
hold off
xlabel('Tetanic Force (N)','FontSize',14)
ylabel('Twitch-Tetanus Ratio','FontSize',14)
title('Tetanic Force vs. Twitch-Tetanus Ratio','FontSize',16)
set(gca,'TickDir','out');
set(gca,'box','off')
cd (figure_folder)
saveas(gcf,'PTivst2t_fiberType','pdf')
cd (code_folder)

%% Twitch amplitude
load('twitch_force')
Pt_i = twitch_force.*PTi_new;
range_Pt_i = max(Pt_i)/min(Pt_i);
figure(10)
loglog(U_th_new,Pt_i ,'o')
xlabel('Recruitment Threshold (log(%MVC))','FontSize',14)
ylabel('Peak Twitch Tension (log(N))','FontSize',14)
title('Recruitment Threshold vs. Peak Twitch Force','FontSize',16)
set(gca,'TickDir','out');
set(gca,'box','off')
cd (figure_folder)
saveas(gcf,'RTvsPt_i','pdf')
cd (code_folder)